STAGE 1A - VERIFY SES APPLICATION SENDING EMAIL ADDRESS

Move to the SES console https://console.aws.amazon.com/ses/home?region=us-east-1#
Click on Verified Identities under Configuration Click Create Identity
Check the 'Email Address' checkbox
Ideally you will need a sending email address for the application and a receiving email address for your test customer. But you can use the same email for both.

For my application email ... the email the app will send from i'm going to use adrian+cuddleotron@cantrill.io
Enter whatever email you want to use to send in the box (it needs to be a valid address as it will be checked)
Click Create Identity
You will receive an email to this address containing a link to click
Click that link
You should see a Congratulations! message
Return to the SES console and Refresh your browser, the verification status should now be verified
Record this address somewhere save as the PetCuddleOTron Sending Address

STAGE 2A - CREATE THE Lambda Execution Role for Lambda

In this stage of the demo you need to create an IAM role which the email_reminder_lambda will use to interact with other AWS services.
You could create this manually, but its easier to do this step using cloudformation to speed things up.
Click https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://learn-cantrill-labs.s3.amazonaws.com/aws-serverless-pet-cuddle-o-tron/lambdarolecfn.yaml&stackName=LAMBDAROLE Check the I acknowledge that AWS CloudFormation might create IAM resources. box and then click Create Stack

Wait for the Stack to move into the CREATE_COMPLETE state before moving into the next

Move to the IAM Console https://console.aws.amazon.com/iam/home?#/roles and review the execution role
Notice that it provides SES, SNS and Logging permissions to whatever assumes this role.
This is what gives lambda the permissions to interact with those services


STAGE 2B - Create the email_reminder_lambda function

Next You're going to create the lambda function which will will be used by the serverless application to create an email and then send it using SES
Move to the lambda console https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions
Click on Create Function
Select Author from scratch
For Function name enter email_reminder_lambda
and for runtime click the dropdown and pick Python 3.9
Expand Change default execution role
Pick to Use an existing Role
Click the Existing Role dropdown and pick LambdaRole (there will be randomness and thats ok)
Click Create Function

STAGE 3A - CREATE STATE MACHINE ROLE

In this stage of the demo you need to create an IAM role which the state machine will use to interact with other AWS services.
You could create this manually, but its easier to do this step using cloudformation to speed things up.
Click https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://learn-cantrill-labs.s3.amazonaws.com/aws-serverless-pet-cuddle-o-tron/statemachinerole.yaml&stackName=StateMachineRole Check the I acknowledge that AWS CloudFormation might create IAM resources. box and then click Create Stack

Wait for the Stack to move into the CREATE_COMPLETE state before moving into the next

Move to the IAM Console https://console.aws.amazon.com/iam/home?#/roles and review the STATE MACHINE role note how it gives

logging permissions
the ability to invoke the email lambda function when it needs to send emails
the ability to use SNS to send text messages

STAGE 4A - CREATE API LAMBDA FUNCTION WHICH SUPPORTS APIGATEWAY
Move to the Lambda console https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions
Click on Create Function
for Function Name use api_lambda
for Runtime use Python 3.9
Expand Change default execution role
Select Use an existing role
Choose the LambdaRole from the dropdown
Click Create Function

This is the lambda function which will support the API Gateway

STAGE 4B - CONFIGURE THE LAMBDA FUNCTION (Using the current UI)
Scroll down, and remove all the code from the lambda_function text box
Open this link in a new tab https://learn-cantrill-labs.s3.amazonaws.com/aws-serverless-pet-cuddle-o-tron/api_lambda.py depending on your browser it might download the .py file, if so, open it in either your code editor, or notepad on windows, or textedit on a mac and copy it all into your clipboard Move back to the Lambda console.
Select the existing lambda code and delete it.
Paste the code into the lambda fuction.

This is the function which will provide compute to API Gateway.
It's job is to be called by API Gateway when its used by the serverless front end part of the application (loaded by S3) It accepts some information from you, via API Gateway and then it starts a state machine execution - which is the logic of the application.

You need to locate the YOUR_STATEMACHINE_ARN placeholder and replace this with the State Machine ARN you noted down in the previous step.
Click Deploy to save the lambda function and configuration.

STAGE 4C - CREATE API
Now we have the api_lambda function created, the next step is to create the API Gateway, API and Method which the front end part of the serverless application will communicate with.
Move to the API Gateway console https://console.aws.amazon.com/apigateway/main/apis?region=us-east-1
Click APIs on the menu on the left
Locate the REST API box, and click Build (being careful not to click the build button for any of the other types of API ... REST API is the one you need) If you see a popup dialog Create your first API dismiss it by clicking OK
Under Create new API ensure New API is selected.

For API name* enter petcuddleotron
for Endpoint Type pick Regional Click create API

STAGE 4D - CREATE RESOURCE
Click the Actions dropdown and Click Create Resource
Under resource name enter petcuddleotron
make sure that Configure as proxy resource is NOT ticked - this forwards everything as is, through to a lambda function, because we want some control, we DONT want this ticked.
Towards the bottom MAKE SURE TO TICK Enable API Gateway CORS.
This relaxes the restrictions on things calling on our API with a different DNS name, it allows the code loaded from the S3 bucket to call the API gateway endpoint.
if you DONT check this box, the API will fail
Click Create Resource

STAGE 4E - CREATE METHOD
Ensure you have the /petcuddleotron resource selected, click Actions dropdown and click create method
In the small dropdown box which appears below /petcuddleotron select POST and click the tick symbol next to it.
this method is what the front end part of the application will make calls to.
Its what the api_lambda will provide services for.

Ensure for Integration Type that Lambda Function is selected.
Make sure us-east-1 is selected for Lambda Region
In the Lambda Function box.. start typing api_lambda and it should autocomplete, click this auto complete (Make sure you pick api_lambda and not email reminder lambda)

Make sure that Use Default Timeout box IS ticked.
Make sure that Use Lambda Proxy integration box IS ticked, this makes sure that all of the information provided to this API is sent on to lambda for processing in the event data structure.
if you don't tick this box, the API will fail
Click Save
You may see a dialogue stating You are about to give API Gateway permission to invoke your Lambda function:. AWS is asking for your OK to adjust the resource policy on the lambda function to allow API Gateway to invoke it. This is a different policy to the execution role policy which controls the permissions lambda gets.

STAGE 4F - DEPLOY API
Now the API, Resource and Method are configured - you now need to deploy the API out to API gateway, specifically an API Gateway STAGE.
Click Actions Dropdown and Deploy API
For Deployment Stage select New Stage
for stage name and stage description enter prod
Click Deploy

At the top of the screen will be an Invoke URL .. note this down somewhere safe, you will need it in the next STAGE.
This URL will be used by the client side component of the serverless application and this will be unique to you.


STAGE 5A - CREATE THE S3 BUCKET
Move to the S3 Console https://s3.console.aws.amazon.com/s3/home?region=us-east-1# Click Create bucket
Choose a unique bucket name Ensure the region is set to US East (N.Virginia) us-east-1
Scroll Down and UNTICK Block all public access
Tick the box under Turning off block all public access might result in this bucket and the objects within becoming public to acknowledge you understand that you can make the bucket public.
Scroll Down to the bottom and click Create bucket

STAGE 5B - SET THE BUCKET AS PUBLIC
Go into the bucket you just created.
Click the Permissions tab.
Scroll down and in the Bucket Policy area, click Edit.

in the box, paste the code below

{
    "Version":"2012-10-17",
    "Statement":[
      {
        "Sid":"PublicRead",
        "Effect":"Allow",
        "Principal": "*",
        "Action":["s3:GetObject"],
        "Resource":["REPLACEME_PET_CUDDLE_O_TRON_BUCKET_ARN/*"]
      }
    ]
  }

Replace the REPLACEME_PET_CUDDLE_O_TRON_BUCKET_ARN (being careful NOT to include the /*) with the bucket ARN, which you can see near to Bucket ARN  Click Save Changes

STAGE 5C - ENABLE STATIC HOSTING
Next you need to enable static hosting on the S3 bucket so that it can be used as a front end website.
Click on the Properties Tab
Scroll down and locate Static website hosting
Click Edit
Select Enable Select Host a static website
For both Index Document and Error Document enter index.html Click Save Changes
Scroll down and locate Static website hosting again.
Under Bucket Website Endpoint copy and note down the bucket endpoint URL.

STAGE 5D - DOWNLOAD AND EDIT THE FRONT END FILES
Download and extra this ZIP file https://learn-cantrill-labs.s3.amazonaws.com/aws-serverless-pet-cuddle-o-tron/serverless_frontend.zip Inside the serverless_frontend folder are the front end files for the serverless website :-

index.html .. the main index page
main.css .. the stylesheet for the page
whiskers.png .. an image of whiskers !!
serverless.js .. the JS code which runs in your browser. It responds when buttons are clicked, and passes and text from the boxes when it calls the API Gateway endpoint.
Open the serverless.js in a code/text editor. Locate the placeholder REPLACEME_API_GATEWAY_INVOKE_URL . replace it with your API Gateway Invoke URL at the end of this URL.. add /petcuddleotron it should look something like this https://somethingsomething.execute-api.us-east-1.amazonaws.com/prod/petcuddleotron Save the file.

STAGE 5E - UPLOAD AND TEST
Return to the S3 console Click on the Objects Tab.
Click Upload
Drag the 4 files from the serverless_frontend folder onto this tab, including the serverless.js file you just edited. MAKE SURE ITS THE EDITED VERSION

Click Upload and wait for it to complete.
Click Exit
Verify All 4 files are in the Objects area of the bucket.

Open the PetCuddleOTron URL you just noted down in a new tab.
What you are seeing is a simple HTML web page created by the HTML file itself and the main.css stylesheet. When you click buttons .. that calls the .js file which is the starting point for the serverless application

Ok to test the application Enter an amount of time until the next cuddle ...I suggest 120 seconds Enter a message, i suggest HUMAN COME HOME NOW
then enter the PetCuddleOTron Customer Address in the email box, this is the email which you verified right at the start as the customer for this application.

before you do the next step and click the button on the application, if you want to see how the application works do the following open a new tab to the Step functions console https://console.aws.amazon.com/states/home?region=us-east-1#/statemachines
Click on PetCuddleOTron
Click on the Logging tab, you will see no logs CLick on the Executions tab, you will see no executions..

Move back to the web application tab (s3 bucket)
then click on Email Minion Button to send an email.

Got back to the Step functions console make sure the Executions Tab is selected click the Refresh Icon Click the execution
Watch the graphic .. see how the Timer state is highlighted The step function is now executing and it has its own state ... its a serverless flow. Keep waiting, and after 120 seconds the visual will update showing the flow through the state machine

Timer .. waits 120 seconds
Email invokes the lambda function to send an email
NextState in then moved through, then finally END
Scroll to the top, click ExeuctionInput and you can see the information entered on the webpage. This was send it, via the JS running in browser, to the API gateway, to the api_lambda then through to the statemachine

Click PetCuddleOTron at the top of the page
Click on the Logging Tab
Because the roles you created had CWLogs permissions the state machine is able to log to CWLogs Review the logs and ensure you are happy with the flow.
